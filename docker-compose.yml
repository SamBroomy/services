services:



  embeddings_service:
    extends:
      file: embeddings-service/docker-compose.yml
      service: embeddings
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC_INPUT: "embedding_requests"
      KAFKA_TOPIC_OUTPUT: "embedding_results"
    depends_on:
      - kafka

  # unstructured:
  #   image: downloads.unstructured.io/unstructured-io/unstructured-api:latest
  #   ports:
  #     - "6969:6969"
  #   command: [ "--port", "6969", "--host", "0.0.0.0" ]
  #   container_name: unstructured-api
  #   #restart: unless-stopped

  # vector_db:
  #   image: qdrant/qdrant
  #   ports:
  #     - "6333:6333"
  #     - "6334:6334"
  #   volumes:
  #     - ./qdrant_storage:/qdrant/storage:z
  #   #restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    #restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    depends_on:
      - kafka



  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_BROKER_ID: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_CREATE_TOPICS: "embedding_requests:1:1,embedding_results:1:1"


# docker network create my-net
# networks:
#   my-net:
#     external: true