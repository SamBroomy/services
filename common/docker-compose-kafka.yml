volumes:
  redpanda-0:

# x-redpanda-service: &redpanda-service
#   command:
#     - redpanda
#     - start
#     - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
#     # Address the broker advertises to clients that connect to the Kafka API.
#     # Use the internal addresses to connect to the Redpanda brokers'
#     # from inside the same Docker network.
#     # Use the external addresses to connect to the Redpanda brokers'
#     # from outside the Docker network.
#     - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
#     - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
#     # Address the broker advertises to clients that connect to the HTTP Proxy.
#     - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
#     - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
#     # Redpanda brokers use the RPC API to communicate with each other internally.
#     - --rpc-addr redpanda-0:33145
#     - --advertise-rpc-addr redpanda-0:33145
#     # Mode dev-container uses well-known configuration properties for development in containers.
#     - --mode dev-container
#     # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
#     - --smp 1
#     - --default-log-level=warn
#   image: docker.redpanda.com/redpandadata/redpanda:latest
#   #container_name: redpanda-0
#   hostname: redpanda-0
#   volumes:
#     - redpanda-0:/var/lib/redpanda/data
#   # networks:
#   #   - redpanda_network
#   ports:
#     - 18081:18081
#     - 18082:18082
#     - 19092:19092
#     - 19644:9644
#   healthcheck:
#     test: ["CMD", "redpanda", "check", "rpc", "redpanda-0:33145"]
#     interval: 2s
#     timeout: 60s
#     retries: 30
#     start_period: 4s

services:
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=warn
    image: docker.redpanda.com/redpandadata/redpanda:latest
    #container_name: redpanda-0
    hostname: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    # networks:
    #   - redpanda_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    # healthcheck:
    #   test: ["CMD", "redpanda", "check", "rpc", "redpanda-0:33145"]
    #   interval: 2s
    #   timeout: 60s
    #   retries: 30
    #   start_period: 4s

  # redpanda-1:
  #   <<: *redpanda-service
  #   hostname: redpanda-1
  #   volumes:
  #     - redpanda-1:/var/lib/redpanda/data
  #   command:
  #     - redpanda
  #     - start
  #     - --kafka-addr internal://0.0.0.0:9093,external://0.0.0.0:19093
  #     - --advertise-kafka-addr internal://redpanda-1:9093,external://localhost:19093
  #     - --pandaproxy-addr internal://0.0.0.0:8083,external://0.0.0.0:18083
  #     - --advertise-pandaproxy-addr internal://redpanda-1:8083,external://localhost:18083
  #     - --schema-registry-addr internal://0.0.0.0:8084,external://0.0.0.0:18084
  #     - --rpc-addr redpanda-1:33146
  #     - --advertise-rpc-addr redpanda-1:33146
  #     - --mode dev-container
  #     - --smp 1
  #     - --default-log-level=warn
  #   healthcheck:
  #     test: ["CMD", "redpanda", "check", "rpc", "redpanda-1:33146"]

  console:
    #container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:latest
    # networks:
    #   - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
      LOGGING_LEVEL_ROOT: INFO
    ports:
      - 8081:8080
    depends_on:
      - redpanda-0

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zoo1:2888:3888
  #     ZOOKEEPER_TICK_TIME: 2000

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #     - "9999:9999"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_JMX_PORT: 9999
  #     KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
  #   healthcheck:
  #     test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
  #     interval: 2s
  #     timeout: 60s
  #     retries: 30
  #     start_period: 4s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    #container_name: kafka-ui
    ports:
      - "8080:8080"
    #restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda-0:9092 #kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
      LOGGING_LEVEL_ROOT: INFO
    depends_on:
      - redpanda-0